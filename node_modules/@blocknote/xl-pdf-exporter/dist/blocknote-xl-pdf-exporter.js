var D = Object.defineProperty;
var R = (t, r, e) => r in t ? D(t, r, { enumerable: !0, configurable: !0, writable: !0, value: e }) : t[r] = e;
var C = (t, r, e) => R(t, typeof r != "symbol" ? r + "" : r, e);
import { jsx as n, jsxs as c, Fragment as v } from "react/jsx-runtime";
import { StyleSheet as I, Svg as m, Path as y, View as l, Text as a, Image as k, Link as T, Font as h, Document as F, Page as B } from "@react-pdf/renderer";
import { Exporter as Z, COLORS_DEFAULT as O } from "@blocknote/core";
const N = 0.75, M = I.create({
  listItem: {
    display: "flex",
    flexDirection: "row",
    gap: 8 * N,
    paddingRight: 10
    // otherwise text overflows, seems like a react-pdf / yoga bug
  },
  bullet: {
    fontFamily: ""
    // TODO: add symbol font
  }
}), W = "•", j = /* @__PURE__ */ n(
  m,
  {
    style: { marginTop: 2 },
    height: "12",
    viewBox: "0 -960 960 960",
    width: "12",
    fill: "undefined",
    children: /* @__PURE__ */ n(y, { d: "M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Z" })
  }
), A = /* @__PURE__ */ n(
  m,
  {
    style: { marginTop: 2 },
    height: "12",
    viewBox: "0 -960 960 960",
    width: "12",
    fill: "undefined",
    children: /* @__PURE__ */ n(y, { d: "m424-312 282-282-56-56-226 226-114-114-56 56 170 170ZM200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Zm0-560v560-560Z" })
  }
), x = ({
  listMarker: t,
  children: r,
  style: e
}) => /* @__PURE__ */ c(l, { style: [M.listItem, e || {}], children: [
  /* @__PURE__ */ n(l, { style: M.bullet, children: typeof t == "string" ? /* @__PURE__ */ n(a, { children: t }) : t }),
  r
] }), V = 0.75, p = I.create({
  tableContainer: {
    // width: "100%",
  },
  row: {
    flexDirection: "row",
    flexWrap: "wrap",
    // width: "100%",
    // justifyContent: "space-between",
    display: "flex"
  },
  cell: {
    paddingHorizontal: 5 * V,
    paddingTop: 3 * V,
    // paddingBottom: 1 * PIXELS_PER_POINT, should be 3px but looks odd, better with no padding Bottom
    borderLeft: "1px solid #ddd",
    borderTop: "1px solid #ddd",
    wordWrap: "break-word",
    whiteSpace: "pre-wrap"
  },
  bottomCell: {
    borderBottom: "1px solid #ddd"
  },
  rightCell: {
    borderRight: "1px solid #ddd"
  }
}), z = (t) => /* @__PURE__ */ n(l, { style: p.tableContainer, wrap: !1, children: t.data.rows.map((r, e) => /* @__PURE__ */ n(
  l,
  {
    style: [
      p.row,
      e === t.data.rows.length - 1 ? p.bottomCell : {}
    ],
    children: r.cells.map((o, i) => /* @__PURE__ */ n(
      l,
      {
        style: [
          p.cell,
          i === r.cells.length - 1 ? p.rightCell : {},
          t.data.columnWidths[i] ? { width: t.data.columnWidths[i] } : { flex: 1 }
        ],
        children: t.transformer.transformInlineContent(o)
      },
      i
    ))
  },
  e
)) }), d = 0.75, H = 16, U = {
  paragraph: (t, r) => /* @__PURE__ */ n(a, { children: r.transformInlineContent(t.content) }),
  bulletListItem: (t, r) => /* @__PURE__ */ n(x, { listMarker: W, children: /* @__PURE__ */ n(a, { children: r.transformInlineContent(t.content) }) }),
  numberedListItem: (t, r, e, o) => /* @__PURE__ */ n(x, { listMarker: `${o}.`, children: /* @__PURE__ */ n(a, { children: r.transformInlineContent(t.content) }) }),
  // would be nice to have pdf checkboxes:
  // https://github.com/diegomura/react-pdf/issues/2103
  checkListItem: (t, r) => /* @__PURE__ */ n(
    x,
    {
      listMarker: t.props.checked ? A : j,
      children: /* @__PURE__ */ n(a, { children: r.transformInlineContent(t.content) })
    }
  ),
  heading: (t, r) => {
    const e = t.props.level === 1 ? 2 : t.props.level === 2 ? 1.5 : 1.17;
    return /* @__PURE__ */ n(
      a,
      {
        style: {
          fontSize: e * H * d,
          fontWeight: 700
        },
        children: r.transformInlineContent(t.content)
      }
    );
  },
  codeBlock: (t) => {
    var o;
    const e = (((o = t.content[0]) == null ? void 0 : o.text) || "").split(`
`).map((i, f) => {
      var u;
      const s = ((u = i.match(/^\s*/)) == null ? void 0 : u[0].length) || 0;
      return /* @__PURE__ */ n(
        a,
        {
          style: {
            marginLeft: s * 9.5 * d
          },
          children: i.trimStart() || /* @__PURE__ */ n(v, { children: " " })
        },
        `line_${f}`
      );
    });
    return /* @__PURE__ */ n(
      l,
      {
        wrap: !1,
        style: {
          padding: 24 * d,
          backgroundColor: "#161616",
          color: "#ffffff",
          lineHeight: 1.25,
          fontSize: H * d,
          fontFamily: "GeistMono"
        },
        children: e
      }
    );
  },
  pageBreak: () => /* @__PURE__ */ n(l, { break: !0 }),
  audio: (t, r) => /* @__PURE__ */ c(l, { wrap: !1, children: [
    b(
      t.props,
      "Open audio file",
      /* @__PURE__ */ n(m, { height: 14, width: 14, viewBox: "0 0 24 24", fill: "currentColor", children: /* @__PURE__ */ n(y, { d: "M2 16.0001H5.88889L11.1834 20.3319C11.2727 20.405 11.3846 20.4449 11.5 20.4449C11.7761 20.4449 12 20.2211 12 19.9449V4.05519C12 3.93977 11.9601 3.8279 11.887 3.73857C11.7121 3.52485 11.3971 3.49335 11.1834 3.66821L5.88889 8.00007H2C1.44772 8.00007 1 8.44778 1 9.00007V15.0001C1 15.5524 1.44772 16.0001 2 16.0001ZM23 12C23 15.292 21.5539 18.2463 19.2622 20.2622L17.8445 18.8444C19.7758 17.1937 21 14.7398 21 12C21 9.26016 19.7758 6.80629 17.8445 5.15557L19.2622 3.73779C21.5539 5.75368 23 8.70795 23 12ZM18 12C18 10.0883 17.106 8.38548 15.7133 7.28673L14.2842 8.71584C15.3213 9.43855 16 10.64 16 12C16 13.36 15.3213 14.5614 14.2842 15.2841L15.7133 16.7132C17.106 15.6145 18 13.9116 18 12Z" }) })
    ),
    w(t.props)
  ] }),
  video: (t, r) => /* @__PURE__ */ c(l, { wrap: !1, children: [
    b(
      t.props,
      "Open video file",
      /* @__PURE__ */ n(m, { height: 14, width: 14, viewBox: "0 0 24 24", fill: "currentColor", children: /* @__PURE__ */ n(y, { d: "M2 3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918C2.44405 21 2 20.5551 2 20.0066V3.9934ZM8 5V19H16V5H8ZM4 5V7H6V5H4ZM18 5V7H20V5H18ZM4 9V11H6V9H4ZM18 9V11H20V9H18ZM4 13V15H6V13H4ZM18 13V15H20V13H18ZM4 17V19H6V17H4ZM18 17V19H20V17H18Z" }) })
    ),
    w(t.props)
  ] }),
  file: (t, r) => /* @__PURE__ */ c(l, { wrap: !1, children: [
    b(
      t.props,
      "Open file",
      /* @__PURE__ */ n(m, { height: 16, width: 16, viewBox: "0 0 24 24", fill: "currentColor", children: /* @__PURE__ */ n(y, { d: "M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z" }) })
    ),
    w(t.props)
  ] }),
  image: async (t, r) => /* @__PURE__ */ c(l, { wrap: !1, children: [
    /* @__PURE__ */ n(
      k,
      {
        src: await r.resolveFile(t.props.url),
        style: {
          width: t.props.previewWidth * d
        }
      }
    ),
    w(t.props)
  ] }),
  table: (t, r) => /* @__PURE__ */ n(z, { data: t.content, transformer: r })
};
function b(t, r, e, o) {
  return /* @__PURE__ */ n(T, { src: t.url, children: /* @__PURE__ */ c(
    l,
    {
      style: {
        display: "flex",
        gap: 8 * 0.75,
        flexDirection: "row"
      },
      children: [
        e,
        /* @__PURE__ */ n(a, { children: t.name || r })
      ]
    }
  ) });
}
function w(t, r) {
  if (t.caption)
    return /* @__PURE__ */ n(
      a,
      {
        style: {
          width: t.previewWidth ? t.previewWidth * d : void 0,
          fontSize: H * 0.8 * d
        },
        children: t.caption
      }
    );
}
const $ = {
  link: (t, r) => /* @__PURE__ */ n(T, { href: t.href, children: t.content.map((e) => r.transformStyledText(e)) }),
  text: (t, r) => r.transformStyledText(t)
}, q = {
  bold: (t) => t ? {
    fontWeight: "bold"
  } : {},
  italic: (t) => t ? {
    fontStyle: "italic"
  } : {},
  underline: (t) => t ? {
    textDecoration: "underline"
    // TODO: could conflict with strike
  } : {},
  strike: (t) => t ? {
    textDecoration: "line-through"
  } : {},
  backgroundColor: (t, r) => t ? {
    backgroundColor: r.options.colors[t].background
  } : {},
  textColor: (t, r) => t ? {
    color: r.options.colors[t].text
  } : {},
  code: (t) => t ? {
    fontFamily: "GeistMono"
  } : {}
}, et = {
  blockMapping: U,
  inlineContentMapping: $,
  styleMapping: q
};
async function K(t) {
  return "https://corsproxy.api.blocknotejs.org/corsproxy/?url=" + encodeURIComponent(t);
}
var L = { BASE_URL: "/", MODE: "production", DEV: !1, PROD: !0, SSR: !1 };
async function X(t, r) {
  if (L.NODE_ENV === "test") {
    const o = (await G(t)).toString("base64");
    return `data:${r};base64,${o}`;
  } else
    return t.default;
}
async function g(t) {
  return X(t, "font/ttf");
}
async function G(t) {
  if (L.NODE_ENV === "test") {
    const r = require("fs");
    let e = t.default;
    return e.startsWith("/@fs/") && (e = e.substring(4)), r.readFileSync(e);
  } else {
    const r = t.default;
    return await (await fetch(r)).arrayBuffer();
  }
}
const _ = 16, S = 0.75;
class rt extends Z {
  constructor(e, o, i) {
    const s = {
      ...{
        emojiSource: {
          format: "png",
          url: "https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/"
        },
        resolveFileUrl: K,
        colors: O
      },
      ...i
    };
    super(e, o, s);
    C(this, "fontsRegistered", !1);
    C(this, "styles", I.create({
      page: {
        paddingTop: 35,
        paddingBottom: 65,
        paddingHorizontal: 35,
        fontFamily: "Inter",
        fontSize: _ * S,
        //  pixels
        lineHeight: 1.5
      },
      block: {},
      blockChildren: {},
      header: {},
      footer: {
        // @ts-ignore
        position: "absolute"
      }
    }));
    C(this, "options");
    this.schema = e, this.options = s;
  }
  /**
   * Mostly for internal use, you probably want to use `toBlob` or `toReactPDFDocument` instead.
   */
  transformStyledText(e) {
    const o = this.mapStyles(e.styles), i = Object.assign({}, ...o);
    return /* @__PURE__ */ n(a, { style: i, children: e.text });
  }
  /**
   * Mostly for internal use, you probably want to use `toBlob` or `toReactPDFDocument` instead.
   */
  async transformBlocks(e, o = 0) {
    const i = [];
    let f = 0;
    for (const s of e) {
      s.type === "numberedListItem" ? f++ : f = 0;
      const u = await this.transformBlocks(s.children, o + 1), E = await this.mapBlock(
        s,
        o,
        f
      );
      if (s.type === "pageBreak") {
        i.push(E);
        continue;
      }
      const P = this.blocknoteDefaultPropsToReactPDFStyle(s.props);
      i.push(
        /* @__PURE__ */ c(v, { children: [
          /* @__PURE__ */ n(
            l,
            {
              style: {
                paddingVertical: 3 * S,
                ...this.styles.block,
                ...P
              },
              children: E
            }
          ),
          u.length > 0 && /* @__PURE__ */ n(
            l,
            {
              style: {
                marginLeft: _ * 1.5 * S,
                ...this.styles.blockChildren
              },
              children: u
            }
          )
        ] })
      );
    }
    return i;
  }
  async registerFonts() {
    if (this.fontsRegistered)
      return;
    this.options.emojiSource && h.registerEmojiSource(this.options.emojiSource);
    let e = await g(
      await import("./Inter_18pt-Regular-byxnNS-8.js")
    );
    h.register({
      family: "Inter",
      src: e
    }), e = await g(
      await import("./Inter_18pt-Italic-BVnfHlUD.js")
    ), h.register({
      family: "Inter",
      fontStyle: "italic",
      src: e
    }), e = await g(
      await import("./Inter_18pt-Bold-BOnnSImi.js")
    ), h.register({
      family: "Inter",
      src: e,
      fontWeight: "bold"
    }), e = await g(
      await import("./Inter_18pt-BoldItalic-DPKIpVzB.js")
    ), h.register({
      family: "Inter",
      fontStyle: "italic",
      src: e,
      fontWeight: "bold"
    }), e = await g(
      await import("./GeistMono-Regular-D4rKXxwr.js")
    ), h.register({
      family: "GeistMono",
      src: e
    }), this.fontsRegistered = !0;
  }
  /**
   * Convert a document (array of Blocks) to a react-pdf Document.
   */
  async toReactPDFDocument(e, o = {}) {
    return await this.registerFonts(), /* @__PURE__ */ n(F, { children: /* @__PURE__ */ c(B, { dpi: 100, size: "A4", style: this.styles.page, children: [
      o.header && /* @__PURE__ */ n(l, { fixed: !0, style: this.styles.header, children: o.header }),
      await this.transformBlocks(e),
      o.footer && /* @__PURE__ */ n(
        l,
        {
          fixed: !0,
          style: [
            {
              left: this.styles.page.paddingHorizontal || 0,
              bottom: (this.styles.page.paddingBottom || 0) / 2,
              right: this.styles.page.paddingHorizontal || 0
            },
            this.styles.footer
          ],
          children: o.footer
        }
      )
    ] }) });
  }
  blocknoteDefaultPropsToReactPDFStyle(e) {
    return {
      textAlign: e.textAlignment,
      backgroundColor: e.backgroundColor === "default" || !e.backgroundColor ? void 0 : this.options.colors[e.backgroundColor].background,
      color: e.textColor === "default" || !e.textColor ? void 0 : this.options.colors[e.textColor].text,
      alignItems: e.textAlignment === "right" ? "flex-end" : e.textAlignment === "center" ? "center" : void 0
    };
  }
}
export {
  rt as PDFExporter,
  et as pdfDefaultSchemaMappings
};
//# sourceMappingURL=blocknote-xl-pdf-exporter.js.map
